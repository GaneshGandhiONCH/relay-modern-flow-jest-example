schema {
  query: RootQuery
  mutation: Mutation
}

type RootQuery {
  viewer: User
  User(userId: ID!): User
}

type User {
  id: ID!
  name: String!
  age: Int
  pets(first: Int, after: String, last: Int, before: String): PetConnection
}

type Pet {
  id: ID!
  name: String!
  owner: User
  type: PetType
  grade: Grade
}

enum PetType {
  CAT
  DOG
}

type PetConnection {
  pageInfo: PageInfo!
  edges: [PetEdge]
}

type PetEdge {
  node: Pet
  cursor: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  endCursor: String
  startCursor: String
}

enum Grade {
  A
  B
  C
}

input SetPetGradeInput {
  petId: ID!
  grade: Grade!
}

type SetPetGradePayload {
  pet: Pet!
}

type Mutation {
  setPetGrade(input: SetPetGradeInput!): SetPetGradePayload
}

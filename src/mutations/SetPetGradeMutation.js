// @flow
import { graphql, commitMutation } from 'react-relay';
import { environment } from '../config/createRelayEnvironment';
import type { GradeEnum } from '../constants/enums';
import type {
  SetPetGradeInput,
  SetPetGradeMutationVariables,
  SetPetGradeMutationResponse
} from './__generated__/SetPetGradeMutation.graphql';

const mutation = graphql`
  mutation SetPetGradeMutation($input: SetPetGradeInput!) {
    setPetGrade(input: $input) {
      pet {
        id
        grade
      }
    }
  }
`;

export function setPetGrade(
  petId: string,
  newGrade: GradeEnum // We use the GradeEnum type autogenerated by graphql-generate-flow-schema-assets
): Promise<?$PropertyType<SetPetGradeMutationResponse, 'setPetGrade'>> {
  // We extract setPetGrade from the generated type as we're not interested in returning the full response
  return new Promise((resolve, reject) => {
    // Relay generates a type that allows us to ensure we send the correct variables. Neat!
    const variables: SetPetGradeMutationVariables = {
      input: {
        petId,
        grade: newGrade
      }
    };

    commitMutation(environment, {
      mutation,
      variables,
      onCompleted: (
        response: ?SetPetGradeMutationResponse,
        errors: ?Array<Error>
      ) => {
        // Return the expected part of the response, if available
        resolve(response ? response.setPetGrade : null);
      },
      onError: reject
    });
  });
}
